puts "Hello,World!"
# putsは「受け取った値を文字列として出力」する働きをする。
# putsを「メソッド(関数)」、その後ろの記述を「引数(ひきすう)」という。
# 引数は、メソッドに渡す値を書く。
# 文字列は、("")か、('')で囲む必要がある。
# 文字列」という言葉が出てきましたが、Rubyでは正確には文字列型（String）と呼びます。

puts 5 + 3
puts "5 + 3"
puts "5" + "3"
# ダブルクォーテーション（"）で囲ったものは、文字列型として扱われます。
# 囲っていないものは、整数型として扱われます。このため、

# 1行目は、整数型の計算である「5+3」が行われ、実行結果「8」が表示されます。
# 2行目は、ダブルクォーテーション（"）で囲われた「5+3」の文字が表示されます。
# 3行目は、ダブルクォーテーション（"）で囲われた文字列型の「5」と「3」を+でつないでいるので、
# 「5」と「3」がつながって表示されます。
# 文字列型同士が+でつながれた場合、その文字列型を「結合する」処理が行われます。
# 今回の場合、「5」の文字と「3」の文字をつないだ「53」という文字列が表示されることになります

puts "samの年齢は" + 27.to_s + "です"
# 整数型同士を+でつなげると足し算が行われる
# 文字列型同士を+でつなげると連結される
# しかし、今のage.rbでは、文字列型と整数型を連結しようとしています。
# age.rbに説明を加えてみると以下のようになります。

# puts "Samの年齢は" + 27 + "です"

# "Samの年齢は" : 文字列型
# 27 : 整数型
# "です": 文字列型

# このように、型が違うものを+でつなげると今回のようなエラーが起こります。
# +でつなげる際は、全て同じ型にする必要があります。
# ※エラー文の「no implicit conversion of Integer into String 」は、
# 整数型から文字列型に勝手に変換することはありません、という意味になります。

# to_sは、整数型から文字列型に変換するメソッドです。

puts 100 + "200".to_i
# こちらのプログラムでは、100+200が計算され、「300」が出力されて欲しいです。
# しかし、age.rbで学習した通り、整数型100と文字列型「200」が混ざっているため
# 、今のままではエラーになります。
# age.rbと違い、今回は足し算を計算して欲しいため、文字列型「200」を整数型に変換したいです。
# ではto_iを用いて、sum.rbを以下のように変更します。


# Rubyの大事な要素である「オブジェクト」と「メソッド」について学びます。
# オブジェクトは、Rubyで取り扱う全データ（文字列、数値、時刻など）のまとまりのことです。
# メソッドは、オブジェクトが持っている固有の機能や処理のことです。
# オブジェクトは、操作対象の状態（データ）と便利な機能（メソッド）を1つにまとめたものです。
# Rubyでは、文字列や数値などすべての値がオブジェクトになっています。
# メソッドとは、オブジェクトが持っている固有の機能や処理のことです。
# メソッドは、自分で定義することも可能です。
# メソッドは「～～するもの」
# オブジェクトは「～～のもの」

puts "WEBCAMP".length
# lengthメソッドは、文字列型の文字数を数えるメソッドです。

puts "WEBCAMP".reverse
# 文字列が逆から表示されます。

puts "WEBCAMPでプログラミング学習".include?("WEBCAMP")
# includeは引数に指定した文字列が含まれているかどうかを調べるinclude?メソッド
# 「WEBCAMPでプログラミング学習」の中には「WEBCAMP」が含まれているため、
# 正しいことを表すtrueが出力されました。
# 逆に含まれていない場合はfalseが出力されます。



