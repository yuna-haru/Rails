# 変数
# 変数は、文字列などのオブジェクトを作成したときに、そのオブジェクトにつける名札です。
# 変数があることで、複雑なデータでも正しく識別されて簡単に呼び出せるようになります。
# なお、変数名は小文字で始まるルールがあります。また、数字を使うことはできません。
# 変数には、グローバル変数、ローカル変数、インスタンス変数、クラス変数などがあり、
# それぞれ役割が異なります。
# ここでは、「変数には種類がある」ことだけを押さえておいてください。

webcamp = "プログラミング学習"
puts webcamp
# 「puts webcamp」により、変数webcampに入ったデータが出力されました。
# このように、「変数名　=　入れたいデータ」とすることで変数を作成できます。
# この場合の「＝」は、数学的な等しいという意味ではなく、
# 「右のオブジェクトを左の変数に代入する」という意味です。

# 定数
# 定数とは先ほどの変数とは異なり、あらかじめ変更しないことが保証された数値やデータに名札をつけたものです。
# 大文字で始まる場合は、「定数」と呼ばれます。定数は後から書き換えることができません。
# 記述のしかたは、変数と同様です。

Pi = 3.14
puts Pi
# 「定数の値を書き換えることができない」と書きましたが、
# 実際には書き換えができてしまいます。
Pi = 100
puts Pi
# このように同じ定数を2回以上使用した際、warningが表示されるものの、書き換えができてしまいます。
# しかし原則として、warningが出る利用の仕方は「実行不可能なエラーではないが非推奨な使い方」
# であり、正しくありません。
# また、定数は書き換えが不要の値に利用するものなので、ここは押さえておいてください。
# 書き換えが必要な場合は変数を用いましょう。

# 数値
puts 100
puts 100 + 3 
# 足し算
puts 100 - 3
 # 引き算
 puts 100 * 3
 # 掛け算
 puts 100 / 3
 # 割り算
 puts 100 % 3
 # 割り算の余り
 
# 変数展開
# 変数の中身を展開することです。
name = "A"
weight = 50
# 3章では、+を用いて文字列を連結しました。
# また、整数型のものを変換する際は、to_sを用いて文字列型に変換することで、
# +による連結が可能になりました。
# いま、weight.rbでは
# 文字列型「A」が格納された変数name
# 整数型50が格納された変数weight
puts name + "さんの体重は" + weight.to_s + "kgです"
# 変数を扱うようになると、整数型か文字列型か少しわかりづらくなり、to_sを付けるべきか悩んでしまいますね。
# そこで、変数展開の出番になります。
# 変数展開を用いると、元の変数がどのような型であっても文字列型に変換してくれます。
puts "#{name}さんの体重は#{weight}kgです"
# +による連結に比べてコード量が減る
# 変数の型を気にする必要がない
# ※変数展開はダブルクォーテーションで括った場合のみ機能し、
# シングルクォーテーションで括った場合は変数ではなく文字列として認識されてしまいます
puts '#{name}さんの体重は#{weight}kgです'
#{name}さんの体重は#{weight}kgですと表示されてしまうから""で囲わないといけない

# 配列
# 配列を使うと、複数のデータをまとめて保存できます。
# 配列の各要素には、どのようなオブジェクトでも代入でき、
# 同じ配列の要素に異なった種類のオブジェクトを代入することも可能です。
# データ型は問われません。文字列でも数値でも代入できます。
names = ["Git", "HTML", "CSS"]
puts names[1]
# ここで、配列のデータには、先頭から0、1、2というように「インデックス番号」が割り振られます。
# なおその際、開始番号は1ではなく、0であることに注意してください。
# データを呼び出すには、配列名[インデックス番号]で記述します。
# ※注意：ここで使用する括弧は、入力も出力も [] （角括弧）です。注意しましょう。
# username:~/environment/ruby $ ruby array.rb
# HTML

# ハッシュ
# ハッシュは、キーと値をセットで保存できるデータの集合です。
# 配列では各要素にインデックス番号が割り振られますが、ハッシュでは任意の値（キー）を割り振ることができます
# ハッシュは、キーと値をセットで保存できるデータの集合です。
# 配列では各要素にインデックス番号が割り振られますが、
# ハッシュでは任意の値（キー）を割り振ることができます。
tall = {"太郎"=>185, "二郎"=>170, "花子"=>150}
puts tall["太郎"]

# シンボル
# シンボルでは、シングルクォートやダブルクォートの代わりに
# コロンを使用することで、文字列と同様に扱うことができます。
tall = {:太郎=>185, :二郎=>170, :花子=>150}
puts tall[:太郎]
# 先ほどのhash.rbと同じ結果になりました# 変数
# 変数は、文字列などのオブジェクトを作成したときに、そのオブジェクトにつける名札です。
# 変数があることで、複雑なデータでも正しく識別されて簡単に呼び出せるようになります。
# なお、変数名は小文字で始まるルールがあります。また、数字を使うことはできません。
# 変数には、グローバル変数、ローカル変数、インスタンス変数、クラス変数などがあり、
# それぞれ役割が異なります。
# ここでは、「変数には種類がある」ことだけを押さえておいてください。

webcamp = "プログラミング学習"
puts webcamp
# 「puts webcamp」により、変数webcampに入ったデータが出力されました。
# このように、「変数名　=　入れたいデータ」とすることで変数を作成できます。
# この場合の「＝」は、数学的な等しいという意味ではなく、
# 「右のオブジェクトを左の変数に代入する」という意味です。

# 定数
# 定数とは先ほどの変数とは異なり、あらかじめ変更しないことが保証された数値やデータに名札をつけたものです。
# 大文字で始まる場合は、「定数」と呼ばれます。定数は後から書き換えることができません。
# 記述のしかたは、変数と同様です。

Pi = 3.14
puts Pi
# 「定数の値を書き換えることができない」と書きましたが、
# 実際には書き換えができてしまいます。
Pi = 100
puts Pi
# このように同じ定数を2回以上使用した際、warningが表示されるものの、書き換えができてしまいます。
# しかし原則として、warningが出る利用の仕方は「実行不可能なエラーではないが非推奨な使い方」
# であり、正しくありません。
# また、定数は書き換えが不要の値に利用するものなので、ここは押さえておいてください。
# 書き換えが必要な場合は変数を用いましょう。

# 数値
puts 100
puts 100 + 3 
# 足し算
puts 100 - 3
 # 引き算
 puts 100 * 3
 # 掛け算
 puts 100 / 3
 # 割り算
 puts 100 % 3
 # 割り算の余り
 
# 変数展開
# 変数の中身を展開することです。
name = "A"
weight = 50
# 3章では、+を用いて文字列を連結しました。
# また、整数型のものを変換する際は、to_sを用いて文字列型に変換することで、
# +による連結が可能になりました。
# いま、weight.rbでは
# 文字列型「A」が格納された変数name
# 整数型50が格納された変数weight
puts name + "さんの体重は" + weight.to_s + "kgです"
# 変数を扱うようになると、整数型か文字列型か少しわかりづらくなり、to_sを付けるべきか悩んでしまいますね。
# そこで、変数展開の出番になります。
# 変数展開を用いると、元の変数がどのような型であっても文字列型に変換してくれます。
puts "#{name}さんの体重は#{weight}kgです"
# +による連結に比べてコード量が減る
# 変数の型を気にする必要がない
# ※変数展開はダブルクォーテーションで括った場合のみ機能し、
# シングルクォーテーションで括った場合は変数ではなく文字列として認識されてしまいます
puts '#{name}さんの体重は#{weight}kgです'
#{name}さんの体重は#{weight}kgですと表示されてしまうから""で囲わないといけない

# 配列
# 配列を使うと、複数のデータをまとめて保存できます。
# 配列の各要素には、どのようなオブジェクトでも代入でき、
# 同じ配列の要素に異なった種類のオブジェクトを代入することも可能です。
# データ型は問われません。文字列でも数値でも代入できます。
names = ["Git", "HTML", "CSS"]
puts names[1]
# ここで、配列のデータには、先頭から0、1、2というように「インデックス番号」が割り振られます。
# なおその際、開始番号は1ではなく、0であることに注意してください。
# データを呼び出すには、配列名[インデックス番号]で記述します。
# ※注意：ここで使用する括弧は、入力も出力も [] （角括弧）です。注意しましょう。
# username:~/environment/ruby $ ruby array.rb
# HTML

# ハッシュ
# ハッシュは、キーと値をセットで保存できるデータの集合です。
# 配列では各要素にインデックス番号が割り振られますが、ハッシュでは任意の値（キー）を割り振ることができます
# ハッシュは、キーと値をセットで保存できるデータの集合です。
# 配列では各要素にインデックス番号が割り振られますが、
# ハッシュでは任意の値（キー）を割り振ることができます。
tall = {"太郎"=>185, "二郎"=>170, "花子"=>150}
puts tall["太郎"]

# シンボル
# シンボルでは、シングルクォートやダブルクォートの代わりに
# コロンを使用することで、文字列と同様に扱うことができます。
tall = {:太郎=>185, :二郎=>170, :花子=>150}
puts tall[:太郎]
# 先ほどのhash.rbと同じ結果になりました