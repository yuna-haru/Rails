# gets
# 「gets」は、キーボード入力された値を取得するメソッドです。
# getsを使うと、キー入力待ちの状態になり、文字を入力してEnterキーを押すまで次に進みません。
# getsで入力した値は、文字列として返されます。

# while文
# 「while文」は、繰り返し処理を行いたいときに使います。条件が満たされるまでtou繰り返し実行される
while 条件 do
  処理  # 条件がtrueの間処理を繰り返す
end
# while ～ doを記述することで、whileからendまでの処理が繰り返し実行されます。
dice = 0  # 変数diceに0を代入し、初期値を設定する

while dice != 6 do  # サイコロの目が6ではない間、diceの初期値は0なので条件を満たす。以降はdiceに代入される数によって結果が異なる
  dice = rand(1..6)  # 1～6の数字がランダムに出力される
  puts dice
end
# randは乱数といい、ランダムに数値を出力します。
# 今回は「rand(1..6)」とすることで、1～6の整数がランダムに選ばれます。
# dice.rbを実行する
# 保存できましたら、dice.rbを実行しましょう。
# 【注意】
# 6が出るまで処理が行われ、かつ乱数を用いているため、
# 実行結果は1種類に定まりません。
# 1～6の数字が出力されており、最後が6で終わっていれば成功です。
# 以下は実行結果例になります。

# for文
# 「for文」も、繰り返し処理を行いたいときに使います。while文では
# 、指定した条件によって繰り返しの有無が判断されます。
# 一方、for文では、指定したオブジェクトから順に値を取り出しながら繰り返されます。
# 基本の書き方は以下のようになります。
for 変数 in 範囲、ハッシュ、配列などを指定 do
  処理
end
# for ～ in ～ do 文を記述することで、endまで記述した処理が繰り返し実行されます。

# eachメソッド
# 「eachメソッド」は、オブジェクト内の要素を順に取り出すメソッドです。
# eachメソッドで記述することで、データの先頭から順に繰り返して処理が行われます。
# 基本の書き方は以下のようになります。
（範囲、ハッシュ、配列などを指定）.each do |変数|
  実行する処理
end

amounts = {"リンゴ"=>2, "イチゴ"=>5, "オレンジ"=>3}
amounts.each do |fruit,amount|
  puts "#{fruit}は#{amount}個です。"
end
# voclabs:~/environment/ruby $ ruby amounts.rb
# リンゴは2個です。
# イチゴは5個です。
# オレンジは3個で

# break
# 繰り返し処理を中断するには、「break」を使います。
# breakは、while、for、eachなどの繰り返し文の中で利用します。